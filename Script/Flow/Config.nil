// License Information:
// Aziella's Babbling Bubbles
// Configuration screen
// 
// 
// 
// (c) Jeroen P. Broks, 
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 19.05.22
// End License Information

#use 'libs/strings'
#use 'libs/linkedlist'
#use 'Script/Use/Debug'
#use 'Script/Use/Aquarium_link'
#use 'Script/Use/Mascotte'
#use 'Script/Use/Music'
#use 'Script/Use/ShowMouse'
#use 'Script/Use/Users'
#use 'Script/Use/Config' 

#macro ITEM_X 100

table CheckBox
var TypeFont
var Previous

void GoHome()
	Config.Store()
	GoToFlow("MAINMENU")
	KillFlow("CONFIG")
end

void Toggle(string boolfield)
	Config[boolfield] = not Config[boolfield]
end


class ConfigItems
	static var List
	static int cy = 80
	static var Hover
	static var Active
	static int strw
	
	string Kind
	string Field
	string Caption
	var CText
	int y
	
	void Draw()
		switch self.Kind
			case "Label"
				self.CText.Draw(ITEM_X,self.y)
			case "Boolean"
				CheckBox[Config[self.Field]]["Draw"](ITEM_X,self.y-5)
				self.CText.Draw(ITEM_X+55,self.y)
			case "String"
				int w
				w = Screen.Width-ITEM_X-self.strw-20
				self.Active = self.Active or self
				self.CText.Draw(ITEM_X,self.y)
				if self.Active==self
					Color(25,18,0)
					Rect(ITEM_X+self.strw,self.y,w,30)
					Color(255,180,0)
					TypeFont.Draw(Config[self.Field].."#",ITEM_X+self.strw+3,self.y)
				else
					Color(2,1,0)
					Rect(ITEM_X+self.strw,self.y,w,30)
					Color(25,18,0)
					TypeFont.Draw(Config[self.Field],ITEM_X+self.strw+3,self.y)
				end
				if self.CText.Width+5>self.strw then self.strw = self.strw+2 end
			case "Back"
				Color(255,255,255)
				Previous = Previous or LoadImage("GFX/UI/Previous.png")
				Previous.Draw(ITEM_X,self.y)
		end
		if Mouse.Y>self.y and Mouse.Y<self.y+50
			self.Hover = self
			// Rect(0,self.y,4,40) // debug
		end
	end
	
	void Click()
		CSay("Clicked: "..self.Kind)
		switch self.Kind
			case "Boolean"
				CSay("Toggling field: "..self.Field)
				Toggle(self.Field)
			case "String"
				CSay("Activating: "..self.Field)
				self.Active = self.Hover
			case "Back"
				CSay("Back to the main menu!")
				GoHome()
		end
	end
	
	void CONSTRUCTOR(string K, string F, string C)
		self.Kind=K
		self.Field = F
		self.Caption = C
		self.CText = TypeFont.Text(C)
		self.List = self.List or TLinkedList.NEW()
		self.y = self.cy
		self.cy = self.cy + 50
		self.List.AddLast(self)
		CSayF("CONFIG: Created %s: %s",F,C)
	end
	
end




global void BUB_Load()
	CSay("CONFIG: Loading checkboxes")
	CheckBox[true ]=LoadImage("GFX/UI/Check.png")
	CheckBox[false]=LoadImage("GFX/UI/UnCheck.png")
	CSay("CONFIG: Font 4 config")
	TypeFont = GetFont("TYPE")
	CSay("CONFIG: Items")
	ConfigItems.NEW("Boolean","ColorBlind","Color Blind Mode")
	ConfigItems.NEW("Boolean","Tutorials","Tutorials")
	ConfigItems.NEW("Label","","Game Jolt")
	ConfigItems.NEW("String","GameJoltUser","User Name")
	ConfigItems.NEW("String","GameJoltToken","Token")
	ConfigItems.NEW("Back","Back to Menu","Back to Menu")
end

global void BUB_Draw()
	// Aquarium
	int m
	m = Screen.Width/2
	DrawAquarium()

	// Actual code
	ConfigItems.Hover = nil // reset
	for Item in ConfigItems.List.Each
		Item.Draw()
	end
	
	// Mascot & Mouse
	if StateExists("MASCOT")
		DrawMascot()
	end
	ShowMouse()
end

global void BUB_KeyPressed(string name, code)
	if name=="F1" and DebugMode
		GoConsole();
		return
	end
	if name=="Escape"
		GoHome()
	end
end

global void BUB_MousePressed(string button,int x, int y)
	if ConfigItems.Hover 
		ConfigItems.Hover.Click()
	end
end


